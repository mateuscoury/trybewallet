{"version":3,"sources":["actions/index.js","pages/Login.js","components/formBody.js","components/form.js","components/tabelaHead.js","components/tabela.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["getApi","dispatch","a","fetch","getapi","json","jsondata","type","payload","Login","state","password","this","props","addemail","history","email","htmlFor","data-testid","onChange","e","target","value","setState","disabled","test","length","onClick","push","React","Component","connect","user","item","FormBody","handleinput","stateRedux","name","types","handleInput","map","moeda","key","despesasTipos","FormInputs","bind","reqButton","id","description","currency","method","tag","fetchData","expenses","then","response","data","exchangeRates","despesa","wallet","currencies","actions","valor","TabelaHead","Tabela","handleDelet","expenseID","deleteExpense","expense","parseFloat","ask","toFixed","deleteExpenses","Wallet","expenseData","reduce","acc","curr","total","Number","App","path","exact","render","Boolean","window","location","hostname","match","INITIAL_STATE","usuarioReducer","action","INITIAL_VALUE","isFetching","walletReducer","Object","keys","filter","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.709081bc.chunk.js","sourcesContent":["export const addEmail = (email) => ({\r\n  type: 'EMAIL_ADD',\r\n  payload: email,\r\n\r\n});\r\n\r\nconst sendapi = (data) => ({\r\n  type: 'GET_DATA',\r\n  payload: data,\r\n});\r\nexport const expense = (valor) => ({\r\n  type: 'GET_EXPENSE',\r\n  valor,\r\n});\r\nexport const deleteExpenses = (expenseID) => ({\r\n  type: 'DELET_EXPENSE',\r\n  expenseID,\r\n});\r\nconst getApi = () => async (dispatch) => {\r\n  const getapi = await fetch('https://economia.awesomeapi.com.br/json/all');\r\n  const jsondata = await getapi.json();\r\n  dispatch(sendapi(jsondata));\r\n};\r\n\r\nexport default getApi;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { addEmail } from '../actions/index';\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.+-]+\\.com$/;\r\n    const minLength = 6;\r\n    const { addemail, history, email } = this.props;\r\n    const { password } = this.state;\r\n    return (\r\n      <form>\r\n        <label htmlFor=\"label-email\">\r\n          Email\r\n          <input\r\n            type=\"text\"\r\n            data-testid=\"email-input\"\r\n            onChange={ (e) => addemail(e.target.value) }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"label-senha\">\r\n          Senha\r\n          <input\r\n            type=\"text\"\r\n            data-testid=\"password-input\"\r\n            onChange={ ({ target }) => this.setState({ password: target.value }) }\r\n          />\r\n        </label>\r\n        <button\r\n          type=\"button\"\r\n          disabled={ !regexEmail.test(email) || password.length < minLength }\r\n          onClick={ () => history.push('/carteira') }\r\n        >\r\n          Entrar\r\n        </button>\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addemail: (item) => dispatch(addEmail(item)),\r\n});\r\nconst mapStateToPops = (state) => ({\r\n  email: state.user.email,\r\n\r\n});\r\n\r\nLogin.propTypes = {\r\n  addemail: PropTypes.func.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  history: PropTypes.objectOf().isRequired,\r\n};\r\n\r\nexport default connect(mapStateToPops, mapDispatchToProps)(Login);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FormBody extends React.Component {\r\n  render() {\r\n    const { handleinput, stateRedux } = this.props;\r\n    return (\r\n      <>\r\n        <label htmlFor=\"despesalabel\">\r\n          Despesa\r\n          <input\r\n            type=\"text\"\r\n            data-testid=\"value-input\"\r\n            name=\"value\"\r\n            onChange={ handleinput }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"descricaolabel\">\r\n          Descricao\r\n          <input\r\n            types=\"text\"\r\n            data-testid=\"description-input\"\r\n            name=\"description\"\r\n            onChange={ handleinput }\r\n          />\r\n        </label>\r\n        <label htmlFor=\"moedalabel\">\r\n          Moeda:\r\n          <select\r\n            data-testid=\"currency-input\"\r\n            onChange={ this.handleInput }\r\n            name=\"currency\"\r\n          >\r\n            {stateRedux.map((moeda) => (\r\n              (moeda !== 'USDT')\r\n        && (\r\n          <option key={ moeda } data-testid={ moeda }>\r\n            {moeda}\r\n          </option>\r\n        )\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </>\r\n    );\r\n  }\r\n}\r\nFormBody.propTypes = {\r\n  stateRedux: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  handleinput: PropTypes.func.isRequired,\r\n\r\n};\r\nexport default FormBody;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport actions, { expense } from '../actions/index';\r\nimport FormBody from './formBody';\r\n\r\nconst despesasTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\r\n\r\nclass FormInputs extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.reqButton = this.reqButton.bind(this);\r\n    this.state = {\r\n      id: 0,\r\n      value: '',\r\n      description: '',\r\n      currency: 'USD',\r\n      method: 'Dinheiro',\r\n      tag: 'Alimentação',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { fetchData } = this.props;\r\n    fetchData();\r\n  }\r\n\r\n  handleInput({ target }) {\r\n    const { name, value } = target;\r\n    this.setState(() => ({ [name]: value }));\r\n  }\r\n\r\n  reqButton() {\r\n    const { expenses } = this.props;\r\n    const { id, value, description,\r\n      currency, method, tag } = this.state;\r\n    return (\r\n      fetch('https://economia.awesomeapi.com.br/json/all')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const obj = {\r\n            id,\r\n            value,\r\n            description,\r\n            currency,\r\n            method,\r\n            tag,\r\n            exchangeRates: data,\r\n          };\r\n          expenses(obj);\r\n          this.setState({ id: id + 1, value: '', description: '' });\r\n        })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { stateRedux } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <form>\r\n          <FormBody handleinput={ this.handleInput } stateRedux={ stateRedux } />\r\n          <label htmlFor=\"metodopagamlabel\">\r\n            Método de pagamento:\r\n            <select\r\n              data-testid=\"method-input\"\r\n              onChange={ this.handleInput }\r\n              name=\"method\"\r\n            >\r\n              <option value=\"Dinheiro\">Dinheiro</option>\r\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\r\n              <option value=\"Cartão de débito\">Cartão de débito</option>\r\n            </select>\r\n          </label>\r\n          <label htmlFor=\"categorialabel\">\r\n            Categoria da despesa\r\n            <select data-testid=\"tag-input\" name=\"tag\">\r\n              {despesasTipos.map((despesa) => (\r\n                <option\r\n                  key={ despesa }\r\n                  value={ despesa }\r\n                >\r\n                  {despesa}\r\n                </option>))}\r\n            </select>\r\n          </label>\r\n          <button\r\n            type=\"button\"\r\n            onClick={ this.reqButton }\r\n          >\r\n            Adicionar despesa\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  stateRedux: state.wallet.currencies,\r\n\r\n});\r\nconst mapDispateToProps = (dispatch) => ({\r\n  fetchData: () => dispatch(actions()),\r\n  expenses: (data) => dispatch(expense(data)),\r\n\r\n});\r\n\r\nFormInputs.propTypes = {\r\n  fetchData: PropTypes.func.isRequired,\r\n  expenses: PropTypes.func.isRequired,\r\n  stateRedux: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\nexport default connect(mapStateToProps, mapDispateToProps)(FormInputs);\r\n","import React from 'react';\r\n\r\nclass TabelaHead extends React.Component {\r\n  render() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>Descrição</th>\r\n          <th>Tag</th>\r\n          <th>Método de pagamento</th>\r\n          <th>Valor</th>\r\n          <th>Moeda</th>\r\n          <th>Câmbio utilizado</th>\r\n          <th>Valor convertido</th>\r\n          <th>Moeda de conversão</th>\r\n          <th>Editar/Excluir</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TabelaHead;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteExpenses } from '../actions/index';\r\nimport TabelaHead from './tabelaHead';\r\n\r\nclass Tabela extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.handleDelet = this.handleDelet.bind(this);\r\n  }\r\n\r\n  handleDelet(expenseID) {\r\n    const { deleteExpense } = this.props;\r\n    deleteExpense(expenseID);\r\n  }\r\n\r\n  render() {\r\n    const { expenses } = this.props;\r\n    return (\r\n      <div>\r\n        <table>\r\n          <TabelaHead />\r\n          <tbody>\r\n            {expenses.map((expense) => (\r\n              <tr key={ expense.id }>\r\n                <td>{expense.description}</td>\r\n                <td>{expense.tag}</td>\r\n                <td>{expense.method}</td>\r\n                <td>{expense.value}</td>\r\n                <td>{expense.exchangeRates[expense.currency].name}</td>\r\n                <td>\r\n                  {parseFloat(\r\n                    expense.exchangeRates[expense.currency].ask,\r\n                  ).toFixed(2)}\r\n                </td>\r\n                <td>\r\n                  {parseFloat(\r\n                    expense.value * expense.exchangeRates[expense.currency].ask,\r\n                  ).toFixed(2)}\r\n                </td>\r\n                <td>Real</td>\r\n                <td>\r\n                  <button\r\n                    data-testid=\"delete-btn\"\r\n                    type=\"button\"\r\n                    onClick={ () => this.handleDelet(expense.id) }\r\n                  >\r\n                    Excluir\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTabela.propTypes = {\r\n  expenses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      currency: PropTypes.string,\r\n      description: PropTypes.string,\r\n      exchangeRates: PropTypes.objectOf(PropTypes.object),\r\n      method: PropTypes.string,\r\n      tag: PropTypes.string,\r\n      value: PropTypes.number,\r\n      id: PropTypes.number,\r\n    }),\r\n  ).isRequired,\r\n  deleteExpense: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteExpense: (expenseID) => dispatch(deleteExpenses(expenseID)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabela);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Formulario from '../components/form';\r\nimport Tabela from '../components/tabela';\r\n\r\nclass Wallet extends React.Component {\r\n  render() {\r\n    const { email, expenseData } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1 data-testid=\"email-field\">{email}</h1>\r\n          <h2 data-testid=\"total-field\">\r\n            {expenseData.reduce((acc, curr) => {\r\n              const { ask } = curr.exchangeRates[curr.currency];\r\n              const total = Number(ask * curr.value);\r\n              return acc + Number(total);\r\n            }, 0).toFixed(2)}\r\n          </h2>\r\n          <h3 data-testid=\"header-currency-field\">BRL</h3>\r\n        </header>\r\n        <Formulario />\r\n        <Tabela />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  email: state.user.email,\r\n  expenseData: state.wallet.expenses,\r\n\r\n});\r\n\r\nWallet.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  expenseData: PropTypes.arrayOf(PropTypes.shape).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Wallet);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/Login';\r\nimport Wallet from './pages/Wallet';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/\" exact render={ (props) => <Login { ...props } /> } />\r\n        <Route path=\"/carteira\" exact render={ (props) => <Wallet { ...props } /> } />\r\n      </Switch>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n};\r\n\r\nconst usuarioReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n  case 'EMAIL_ADD':\r\n    return ({\r\n      ...state,\r\n      email: action.payload,\r\n    });\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default usuarioReducer;\r\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\r\nconst INITIAL_VALUE = {\r\n  currencies: [],\r\n  expenses: [],\r\n  total: 0,\r\n  isFetching: false,\r\n};\r\nconst walletReducer = (state = INITIAL_VALUE, action) => {\r\n  switch (action.type) {\r\n  case 'ADD_EXPENSE':\r\n    return state;\r\n  case 'GET_DATA':\r\n    return { ...state, currencies: Object.keys(action.payload) };\r\n  case 'GET_EXPENSE':\r\n    return { ...state, expenses: [...state.expenses, action.valor] };\r\n  case 'DELET_EXPENSE':\r\n    return {\r\n      ...state,\r\n      expenses: state.expenses.filter((expense) => expense.id !== action.expenseID),\r\n    };\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default walletReducer;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n\r\n// Configure os seus reducers.\r\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\r\nconst rootReducer = combineReducers({ user, wallet });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}