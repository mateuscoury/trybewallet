{"version":3,"sources":["actions/index.js","pages/Login.js","components/formBody.js","components/form.js","components/tabelaHead.js","components/tabela.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["getApi","dispatch","a","fetch","getapi","json","jsondata","type","payload","Login","state","password","this","props","addemail","history","email","id","src","htmlFor","name","placeholder","autoComplete","data-testid","onChange","e","target","value","setState","disabled","test","length","onClick","push","React","Component","connect","user","item","FormBody","handleinput","stateRedux","handleInput","map","moeda","key","despesasTipos","FormInputs","bind","reqButton","description","currency","method","tag","fetchData","expenses","then","response","data","exchangeRates","despesa","wallet","currencies","actions","valor","TabelaHead","Tabela","handleDelet","expenseID","deleteExpense","expense","parseFloat","ask","toFixed","deleteExpenses","Wallet","expenseData","reduce","acc","curr","total","Number","App","path","exact","render","Boolean","window","location","hostname","match","INITIAL_STATE","usuarioReducer","action","INITIAL_VALUE","isFetching","walletReducer","Object","keys","filter","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b86a829.chunk.js","sourcesContent":["export const addEmail = (email) => ({\n  type: 'EMAIL_ADD',\n  payload: email,\n\n});\n\nconst sendapi = (data) => ({\n  type: 'GET_DATA',\n  payload: data,\n});\nexport const expense = (valor) => ({\n  type: 'GET_EXPENSE',\n  valor,\n});\nexport const deleteExpenses = (expenseID) => ({\n  type: 'DELET_EXPENSE',\n  expenseID,\n});\nconst getApi = () => async (dispatch) => {\n  const getapi = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const jsondata = await getapi.json();\n  dispatch(sendapi(jsondata));\n};\n\nexport default getApi;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addEmail } from '../actions/index';\nimport './login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      password: '',\n    };\n  }\n\n  render() {\n    const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.+-]+\\.com$/;\n    const minLength = 6;\n    const { addemail, history, email } = this.props;\n    const { password } = this.state;\n    return (\n      <div id='containerr'>\n        <img src='https://image.flaticon.com/icons/png/512/218/218390.png' />\n        <form>\n          <label htmlFor='label-email'>Email</label>\n          <input\n            name='email'\n            placeholder='Digite seu email'\n            type='email'\n            autoComplete='true'\n            data-testid='email-input'\n            onChange={(e) => addemail(e.target.value)}\n          />\n          <label htmlFor='label-senha'>Senha</label>\n          <input\n            name='password'\n            autoComplete='true'\n            placeholder='Digite sua senha'\n            type='password'\n            data-testid='password-input'\n            onChange={({ target }) => this.setState({ password: target.value })}\n          />\n          <button\n            type='button'\n            disabled={!regexEmail.test(email) || password.length < minLength}\n            onClick={() => history.push('/carteira')}\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addemail: (item) => dispatch(addEmail(item)),\n});\nconst mapStateToPops = (state) => ({\n  email: state.user.email,\n});\n\nLogin.propTypes = {\n  addemail: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  history: PropTypes.objectOf().isRequired,\n};\n\nexport default connect(mapStateToPops, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.css';\n\nclass FormBody extends React.Component {\n  render() {\n    const { handleinput, stateRedux } = this.props;\n    return (\n      <div id='bla'>\n        <label htmlFor='despesalabel'>Valor</label>\n        <input\n          type='number'\n          data-testid='value-input'\n          name='value'\n          placeholder='20'\n          onChange={handleinput}\n        />\n        <label htmlFor='descricaolabel'>Descricao</label>\n        <input\n          type='text'\n          placeholder='Coloque aquia descrição'\n          data-testid='description-input'\n          name='description'\n          onChange={handleinput}\n        />\n        <label htmlFor='moedalabel'>Moeda:</label>\n        <select\n          data-testid='currency-input'\n          placeholder='USD'\n          onChange={this.handleInput}\n          name='currency'\n        >\n          {stateRedux.map(\n            (moeda) =>\n              moeda !== 'USDT' && (\n                <option key={moeda} data-testid={moeda}>\n                  {moeda}\n                </option>\n              )\n          )}\n        </select>\n      </div>\n    );\n  }\n}\nFormBody.propTypes = {\n  stateRedux: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleinput: PropTypes.func.isRequired,\n};\nexport default FormBody;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions, { expense } from '../actions/index';\nimport FormBody from './formBody';\nimport './form.css';\n\nconst despesasTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass FormInputs extends React.Component {\n  constructor() {\n    super();\n    this.handleInput = this.handleInput.bind(this);\n    this.reqButton = this.reqButton.bind(this);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchData } = this.props;\n    fetchData();\n  }\n\n  handleInput({ target }) {\n    const { name, value } = target;\n    this.setState(() => ({ [name]: value }));\n  }\n\n  reqButton() {\n    const { expenses } = this.props;\n    const { id, value, description, currency, method, tag } = this.state;\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => {\n        const obj = {\n          id,\n          value,\n          description,\n          currency,\n          method,\n          tag,\n          exchangeRates: data,\n        };\n        expenses(obj);\n        this.setState({ id: id + 1, value: '', description: '' });\n      });\n  }\n\n  render() {\n    const { stateRedux } = this.props;\n\n    return (\n      <div id='containerForm'>\n        <form>\n          <FormBody handleinput={this.handleInput} stateRedux={stateRedux} />\n          <label htmlFor='metodopagamlabel'>Método de pagamento:</label>\n          <select data-testid='method-input' onChange={this.handleInput} name='method'>\n            <option value='Dinheiro'>Dinheiro</option>\n            <option value='Cartão de crédito'>Cartão de crédito</option>\n            <option value='Cartão de débito'>Cartão de débito</option>\n          </select>\n          <label htmlFor='categorialabel'>Categoria da despesa</label>\n          <select data-testid='tag-input' name='tag'>\n            {despesasTipos.map((despesa) => (\n              <option key={despesa} value={despesa}>\n                {despesa}\n              </option>\n            ))}\n          </select>\n          <button type='button' onClick={this.reqButton}>\n            Adicionar despesa\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  stateRedux: state.wallet.currencies,\n});\nconst mapDispateToProps = (dispatch) => ({\n  fetchData: () => dispatch(actions()),\n  expenses: (data) => dispatch(expense(data)),\n});\n\nFormInputs.propTypes = {\n  fetchData: PropTypes.func.isRequired,\n  expenses: PropTypes.func.isRequired,\n  stateRedux: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\nexport default connect(mapStateToProps, mapDispateToProps)(FormInputs);\n","import React from 'react';\nimport './table.css';\nclass TabelaHead extends React.Component {\n  render() {\n    return (\n      <thead>\n        <tr id='zin'>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TabelaHead;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpenses } from '../actions/index';\nimport TabelaHead from './tabelaHead';\nimport './table.css';\n\nclass Tabela extends React.Component {\n  constructor() {\n    super();\n    this.handleDelet = this.handleDelet.bind(this);\n  }\n\n  handleDelet(expenseID) {\n    const { deleteExpense } = this.props;\n    deleteExpense(expenseID);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div id='tableContainer'>\n        <table>\n          <TabelaHead />\n          <tbody>\n            {expenses.map((expense) => (\n              <tr key={expense.id}>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{expense.value}</td>\n                <td>{expense.exchangeRates[expense.currency].name}</td>\n                <td>\n                  {parseFloat(expense.exchangeRates[expense.currency].ask).toFixed(2)}\n                </td>\n                <td>\n                  {parseFloat(\n                    expense.value * expense.exchangeRates[expense.currency].ask\n                  ).toFixed(2)}\n                </td>\n                <td>Real</td>\n\n                <button\n                  data-testid='delete-btn'\n                  type='button'\n                  onClick={() => this.handleDelet(expense.id)}\n                >\n                  Excluir\n                </button>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTabela.propTypes = {\n  expenses: PropTypes.arrayOf(\n    PropTypes.shape({\n      currency: PropTypes.string,\n      description: PropTypes.string,\n      exchangeRates: PropTypes.objectOf(PropTypes.object),\n      method: PropTypes.string,\n      tag: PropTypes.string,\n      value: PropTypes.number,\n      id: PropTypes.number,\n    })\n  ).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expenseID) => dispatch(deleteExpenses(expenseID)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabela);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Formulario from '../components/form';\nimport Tabela from '../components/tabela';\nimport './wallet.css';\n\nclass Wallet extends React.Component {\n  render() {\n    const { email, expenseData } = this.props;\n\n    return (\n      <div id='containerWallet'>\n        <header>\n          <div id='areaImage'>\n            <img src='https://image.flaticon.com/icons/png/512/218/218390.png' />\n          </div>\n          <div id='emailField'>\n            <h1 data-testid='email-field'>{email}</h1>\n          </div>\n          <div id='totalField'>\n            <h2 data-testid='total-field'>\n              {expenseData\n                .reduce((acc, curr) => {\n                  const { ask } = curr.exchangeRates[curr.currency];\n                  const total = Number(ask * curr.value);\n                  return acc + Number(total);\n                }, 0)\n                .toFixed(2)}\n            </h2>\n            <h3 data-testid='header-currency-field'>BRL</h3>\n          </div>\n        </header>\n        <Formulario />\n        <Tabela />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenseData: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenseData: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport './App.css';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div id='container'>\n        <Switch>\n          <Route path='/' exact render={(props) => <Login {...props} />} />\n          <Route path='/carteira' exact render={(props) => <Wallet {...props} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst usuarioReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'EMAIL_ADD':\n    return ({\n      ...state,\n      email: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default usuarioReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_VALUE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  isFetching: false,\n};\nconst walletReducer = (state = INITIAL_VALUE, action) => {\n  switch (action.type) {\n  case 'ADD_EXPENSE':\n    return state;\n  case 'GET_DATA':\n    return { ...state, currencies: Object.keys(action.payload) };\n  case 'GET_EXPENSE':\n    return { ...state, expenses: [...state.expenses, action.valor] };\n  case 'DELET_EXPENSE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.expenseID),\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}